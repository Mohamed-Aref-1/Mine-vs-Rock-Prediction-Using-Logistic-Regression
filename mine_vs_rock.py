# -*- coding: utf-8 -*-
"""Mine vs Rock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p4BCoHH8A2VuFCEyKMmXDOpoOYM1wguA

Importing the libiraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score 
from sklearn.metrics import confusion_matrix

"""Data collection and processing """

#loading the dataset to a pandas dataframe 
sonar_data = pd.read_csv('/content/Copy of sonar data.csv' , header = None)

sonar_data.head()

"""Number of rows and columns"""

sonar_data.shape

sonar_data.describe()

"""How many values are Rocks and Mines"""

sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

"""Seperate the data and labels"""

x = sonar_data.drop(columns = 60 , axis = 1)
y = sonar_data[60]

print(x)
print("******************")
print(y)

"""Training and test data """

x_train , x_test , y_train, y_test = train_test_split(x, y, test_size = 0.5, stratify = y , random_state = 5)

print(x.shape , x_train.shape, x_test.shape )

print(x_train, y_train)

"""Model Training using logestic regression"""

model = LogisticRegression()

"""Train the model"""

model.fit(x_train , y_train)

"""Model Evaluation"""

#accuracy on the training data 
x_train_prediction = model.predict(x_train)
training_data_accuracy =  accuracy_score(x_train_prediction, y_train)

print(f"The Accuracy score is: {training_data_accuracy}")

#Testing the data
test_data_predeiction = model.predict(x_test)
accuracy_of_test = accuracy_score(test_data_predeiction , y_test)
print(f"The Accuracy score is: {accuracy_of_test}")

input_data = (0.0423,0.0321,0.0709,0.0108,0.1070,0.0973,0.0961,0.1323,0.2462,0.2696,0.3412,0.4292,0.3682,0.3940,0.2965,0.3172,0.2825,0.3050,0.2408,0.5420,0.6802,0.6320,0.5824,0.6805,0.5984,0.8412,0.9911,0.9187,0.8005,0.6713,0.5632,0.7332,0.6038,0.2575,0.0349,0.1799,0.3039,0.4760,0.5756,0.4254,0.5046,0.7179,0.6163,0.5663,0.5749,0.3593,0.2526,0.2299,0.1271,0.0356,0.0367,0.0176,0.0035,0.0093,0.0121,0.0075,0.0056,0.0021,0.0043,0.0017)
input_data_np = np.asarray(input_data)
reshaped_input_data_np = input_data_np.reshape(1, -1)
predicted_value = model.predict(reshaped_input_data_np)
print(predicted_value)
if(predicted_value[0] == "R"):
    print("It is a Rock")

else :
        print("It is a Mine")

import numpy as np

def plot_confusion_matrix(cm,
                          target_names,
                          title='Confusion matrix',
                          cmap=None,
                          normalize=True):
    """
    given a sklearn confusion matrix (cm), make a nice plot

    Arguments
    ---------
    cm:           confusion matrix from sklearn.metrics.confusion_matrix

    target_names: given classification classes such as [0, 1, 2]
                  the class names, for example: ['high', 'medium', 'low']

    title:        the text to display at the top of the matrix

    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm
                  see http://matplotlib.org/examples/color/colormaps_reference.html
                  plt.get_cmap('jet') or plt.cm.Blues

    normalize:    If False, plot the raw numbers
                  If True, plot the proportions

    Usage
    -----
    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by
                                                              # sklearn.metrics.confusion_matrix
                          normalize    = True,                # show proportions
                          target_names = y_labels_vals,       # list of names of the classes
                          title        = best_estimator_name) # title of graph

    Citiation
    ---------
    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html

    """
    import matplotlib.pyplot as plt
    import numpy as np
    import itertools

    # swap top left and top right elements
    cm[[0, 1], [1, 0]] = cm[[0, 0], [1, 0]]

    accuracy = np.trace(cm) / np.sum(cm).astype('float')
    misclass = 1 - accuracy

    if cmap is None:
        cmap = plt.get_cmap('cool') ##https://matplotlib.org/3.1.1/gallery/color/colormap_reference.html

    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    if target_names is not None:
        tick_marks = np.arange(len(target_names))
        plt.xticks(tick_marks, target_names, rotation=45)
        plt.yticks(tick_marks, target_names)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]


    thresh = cm.max() / 1.5 if normalize else cm.max() / 2
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        if normalize:
            plt.text(j, i, "{:0.4f}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
        else:
            plt.text(j, i, "{:,}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")


    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))
    plt.show()

y_pred = model.predict(x_test)
cm1 = confusion_matrix(y_test, y_pred)
print(cm1)
total1=sum(sum(cm1))
accuracy1=(cm1[0,0]+cm1[1,1])/total1
print ('Accuracy : ', accuracy1*100)

sensitivity1 = cm1[0,0]/(cm1[0,0]+cm1[0,1])
print('Sensitivity : ', sensitivity1 )

specificity1 = cm1[1,1]/(cm1[1,0]+cm1[1,1])
print('Specificity : ', specificity1)

plot_confusion_matrix(cm1,
                          ["True","False"], # use y_train.unique()  to know order of labels
                          cmap=None,
                          normalize=False)

